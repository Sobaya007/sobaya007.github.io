<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>バグ on そばやのブログ</title>
    <link>https://sobaya007.github.io/tags/%E3%83%90%E3%82%B0/</link>
    <description>Recent content in バグ on そばやのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 05 Dec 2019 13:38:33 +0900</lastBuildDate>
    
	<atom:link href="https://sobaya007.github.io/tags/%E3%83%90%E3%82%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LDCのバグみつけた - その2 -</title>
      <link>https://sobaya007.github.io/2019/12/05/ldc%E3%81%AE%E3%83%90%E3%82%B0%E3%81%BF%E3%81%A4%E3%81%91%E3%81%9F-%E3%81%9D%E3%81%AE2/</link>
      <pubDate>Thu, 05 Dec 2019 13:38:33 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/12/05/ldc%E3%81%AE%E3%83%90%E3%82%B0%E3%81%BF%E3%81%A4%E3%81%91%E3%81%9F-%E3%81%9D%E3%81%AE2/</guid>
      <description>またみつけてしまった。。。 今度のやつはまた微妙で、私が自分でビルドしたLDCでのみ起きた現象なので、私が悪い可能性も多分にあります。
一応起こったことをご紹介。
struct Q { auto func(uint[3] a, uint[3] b, uint c) { return this; } } void main() { Q q; q.func([1,1,1],[1,1,1],1); }  これをビルドすると、
ldc2: ../gen/abi-x86-64.cpp:305: void X86_64TargetABI::rewriteArgument(IrFuncTy&amp;amp;, IrFuncTyArg&amp;amp;, {anonymous}::RegCount&amp;amp;): Assertion `originalLType-&amp;gt;isStructTy()&#39; failed. #0 0x00007ff128105b7b llvm::sys::PrintStackTrace(llvm::raw_ostream&amp;amp;) (/usr/lib/libLLVM-9.so+0xb08b7b) #1 0x00007ff128103a44 llvm::sys::RunSignalHandlers() (/usr/lib/libLLVM-9.so+0xb06a44) #2 0x00007ff128103bd6 (/usr/lib/libLLVM-9.so+0xb06bd6) #3 0x00007ff1275df930 __restore_rt (/usr/lib/libpthread.so.0+0x14930) #4 0x00007ff1270f3f25 raise (/usr/lib/libc.so.6+0x3bf25) #5 0x00007ff1270dd897 abort (/usr/lib/libc.so.6+0x25897) #6 0x00007ff1270dd767 _nl_load_domain.cold (/usr/lib/libc.so.6+0x25767) #7 0x00007ff1270ec526 (/usr/lib/libc.so.6+0x34526) #8 0x000055f8e421b48f X86_64TargetABI::rewriteArgument(IrFuncTy&amp;amp;, IrFuncTyArg&amp;amp;, (anonymous namespace)::RegCount&amp;amp;) (/usr/local/bin/ldc2+0xc9348f) #9 0x000055f8e421b7ca X86_64TargetABI::rewriteFunctionType(IrFuncTy&amp;amp;) (/usr/local/bin/ldc2+0xc937ca) #10 0x000055f8e40a77c8 DtoFunctionType(Type*, IrFuncTy&amp;amp;, Type*, Type*, FuncDeclaration*) (/usr/local/bin/ldc2+0xb1f7c8) #11 0x000055f8e40a820d DtoFunctionType(FuncDeclaration*) (/usr/local/bin/ldc2+0xb2020d) #12 0x000055f8e40a875d DtoResolveFunction(FuncDeclaration*) (/usr/local/bin/ldc2+0xb2075d) #13 0x000055f8e40aa79a DtoDefineFunction(FuncDeclaration*, bool) (/usr/local/bin/ldc2+0xb2279a) #14 0x000055f8e40983f9 CodegenVisitor::visit(FuncDeclaration*) (/usr/local/bin/ldc2+0xb103f9) #15 0x000055f8e40977a5 CodegenVisitor::visit(StructDeclaration*) (/usr/local/bin/ldc2+0xb0f7a5) #16 0x000055f8e4093fdd Declaration_codegen(Dsymbol*, IRState*) (/usr/local/bin/ldc2+0xb0bfdd) #17 0x000055f8e4093f8a Declaration_codegen(Dsymbol*) (/usr/local/bin/ldc2+0xb0bf8a) #18 0x000055f8e40d3100 codegenModule(IRState*, Module*) (/usr/local/bin/ldc2+0xb4b100) #19 0x000055f8e420ce27 ldc::CodeGenerator::emit(Module*) (/usr/local/bin/ldc2+0xc84e27) #20 0x000055f8e41cc700 codegenModules(Array&amp;lt;Module*&amp;gt;&amp;amp;) (/usr/local/bin/ldc2+0xc44700) #21 0x000055f8e3f1239a mars_mainBody(Param&amp;amp;, Array&amp;lt;char const*&amp;gt;&amp;amp;, Array&amp;lt;char const*&amp;gt;&amp;amp;) (/usr/local/bin/ldc2+0x98a39a) #22 0x000055f8e41cc529 cppmain() (/usr/local/bin/ldc2+0xc44529) #23 0x000055f8e450ef30 _D2rt6dmain212_d_run_main2UAAamPUQgZiZ6runAllMFZv (/usr/local/bin/ldc2+0xf86f30) #24 0x000055f8e450ed3f _d_run_main2 (/usr/local/bin/ldc2+0xf86d3f) #25 0x000055f8e450eb9e _d_run_main (/usr/local/bin/ldc2+0xf86b9e) #26 0x000055f8e420686f args::forwardToDruntime(int, char const**) (/usr/local/bin/ldc2+0xc7e86f) #27 0x000055f8e41cbd0d main (/usr/local/bin/ldc2+0xc43d0d) #28 0x00007ff1270df153 __libc_start_main (/usr/lib/libc.</description>
    </item>
    
    <item>
      <title>LDCのバグみつけた</title>
      <link>https://sobaya007.github.io/2019/12/01/ldc%E3%81%AE%E3%83%90%E3%82%B0%E3%81%BF%E3%81%A4%E3%81%91%E3%81%9F/</link>
      <pubDate>Sun, 01 Dec 2019 23:10:16 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/12/01/ldc%E3%81%AE%E3%83%90%E3%82%B0%E3%81%BF%E3%81%A4%E3%81%91%E3%81%9F/</guid>
      <description>久しぶりにバグ見つけました。
端的に言うと、Linux上かつLDCを使って以下に示すような構成のアプリケーションをビルドしようとすると失敗するというものです。
中身 ちょっと複雑です。 こちらに出来上がったものを置いておいたので、よければどうぞ。
まず2つパッケージを用意します。
├── app │ ├── dub.sdl │ └── source │ └── app.d └── lib ├── dub.sdl └── source ├── foo │ └── main.d └── tmp.d  ここではappとlibとしました。 ソースファイルは全部で3つです。
app/source/app.d
import std : writeln; void main() {}  lib/source/foo/main.d
import std.file; void main() {}  lib/source/tmp.d
import std.conv; enum E { M } string func(E e) { return e.to!string; }  dub.sdlの中身はシンプルで、単純にappがlibに依存しているだけです。
いろいろ試したのですが、これが結構最小に近いです。
起きること これでappパッケージをLinux上で実行しようとすると、</description>
    </item>
    
    <item>
      <title>D言語のしょうもないバグをまたみつけた</title>
      <link>https://sobaya007.github.io/2019/06/09/d%E8%A8%80%E8%AA%9E%E3%81%AE%E3%81%97%E3%82%87%E3%81%86%E3%82%82%E3%81%AA%E3%81%84%E3%83%90%E3%82%B0%E3%82%92%E3%81%BE%E3%81%9F%E3%81%BF%E3%81%A4%E3%81%91%E3%81%9F/</link>
      <pubDate>Sun, 09 Jun 2019 20:07:51 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/06/09/d%E8%A8%80%E8%AA%9E%E3%81%AE%E3%81%97%E3%82%87%E3%81%86%E3%82%82%E3%81%AA%E3%81%84%E3%83%90%E3%82%B0%E3%82%92%E3%81%BE%E3%81%9F%E3%81%BF%E3%81%A4%E3%81%91%E3%81%9F/</guid>
      <description>いつもの 今回見つけたバグコードはこちらになります
class A {} void main() { auto f = (A a) =&amp;gt; 1; // this is acceptable auto g = (A) =&amp;gt; 1; // this is not acceptable }  上のラムダ式はただしく型推論されますが、下のラムダ式(引数に名前を与えない)では型がvoidになってしまいます。
仕様かはわかりませんが、習慣に則ってここに報告しておきます。</description>
    </item>
    
    <item>
      <title>D言語で継承&#43;配列のバグがずっと残ってる件について</title>
      <link>https://sobaya007.github.io/2019/04/19/d%E8%A8%80%E8%AA%9E%E3%81%A7%E7%B6%99%E6%89%BF-%E9%85%8D%E5%88%97%E3%81%AE%E3%83%90%E3%82%B0%E3%81%8C%E3%81%9A%E3%81%A3%E3%81%A8%E6%AE%8B%E3%81%A3%E3%81%A6%E3%82%8B%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Fri, 19 Apr 2019 22:38:06 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/04/19/d%E8%A8%80%E8%AA%9E%E3%81%A7%E7%B6%99%E6%89%BF-%E9%85%8D%E5%88%97%E3%81%AE%E3%83%90%E3%82%B0%E3%81%8C%E3%81%9A%E3%81%A3%E3%81%A8%E6%AE%8B%E3%81%A3%E3%81%A6%E3%82%8B%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>またバグの話ですね。 このバグは結構前に発見していて、issueも投げた&amp;hellip;気がするんですが、一向に直りませんね。かなり頻繁に出くわすんですが、他の環境だと違うのでしょうか？
今回のバグはこんなかんじで発生します。
 interface I { int x(); } class C : I { int x() { return 10; } } void main(){ I[] iList; C[] cList = [new C]; iList ~= cList; import std.stdio : writeln; writeln(iList[0].x); //私の環境では6と出た。 }   つまり、
 あるインターフェースIとそれを継承したクラスCがある。 I[]に対して、C[]を結合する(CでなくC[]!)。 I[]から取り出したI越しに仮想関数を呼ぶと、だいたい壊れている(変な値を返したり、SEGVしたりする)。  というもの。 いかがでしたか？ よくわかりませんが、バグっていることがわかりました！ 最後まで見ていただきありがとうございます。</description>
    </item>
    
    <item>
      <title>DMD2.085.0で謎のエラーが出てビルドできなくなる件について</title>
      <link>https://sobaya007.github.io/2019/04/11/dmd2.085.0%E3%81%A7%E8%AC%8E%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E5%87%BA%E3%81%A6%E3%83%93%E3%83%AB%E3%83%89%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%8F%E3%81%AA%E3%82%8B%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Thu, 11 Apr 2019 20:59:06 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/04/11/dmd2.085.0%E3%81%A7%E8%AC%8E%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E5%87%BA%E3%81%A6%E3%83%93%E3%83%AB%E3%83%89%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%8F%E3%81%AA%E3%82%8B%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>実は前から気づいていたが、dmd2.085.0でとあるプロジェクトをビルドしようとしたところtym = x27とかいう謎のエラーを吐いてビルドできなくなってしまった。 ggってみても関連するものが見当たらない。 ブチキレたので調査をしてみた。
とりあえず現状報告。
OSはArch Linux。 dmdが2.085.0になったとき、エラーが起きた箇所の周辺コードを表示してくれるとかいう神機能を今更実装してくれたので試してみようと思い、使ってみたら上記の事態が発生。その時いろいろいじってはみたけどわからず。pacmanでバージョンを上げようとしても上がらなかったので「パッケージ管理者がバグに気づいて止めてるのかな？」と思いとりあえず放置。 ところが本日pacman -Syuしたところ、dmd2.0850が(バグったまま)入ってきやがった。おい。
ということで見つけた最小コードがこちら↓
 app.d
struct A { float e; } struct B { this(A[1]) {} }   これをdubのプロジェクトの中でビルドしようとすると、少なくとも私の環境では落ちます。ぜひお試しあれ。
ちなみにAのメンバーが浮動小数型だとバグりますが、整数型だと通ります。 また、Bのコンストラクタ引数の配列数を2以上にすると通ります。 意味がわからん&amp;hellip;
追記 2019/5/25
この記事についてツイートをしたところ https://t.co/5HGn31UQcD これでなおるかもしれません、といっても最速で2.085.2リリースになってしまいますが。
&amp;mdash; 私にICEが舞い降りた！ (@shitsyndrome) April 16, 2019  とのお知らせが。
実際にdmd2.086.0で動かしてみると、無事動きました！ありがとうございます！！
BugzillaとかでIssue立てるのは私なんかにはハードルがめちゃめちゃ高いのでTwitterで反応してこうして直してくださると本当にありがたいですね。</description>
    </item>
    
    <item>
      <title>D言語&#43;Shared Library&#43;Down castで型情報が死ぬ問題</title>
      <link>https://sobaya007.github.io/2019/04/10/d%E8%A8%80%E8%AA%9E-shared-library-down-cast%E3%81%A7%E5%9E%8B%E6%83%85%E5%A0%B1%E3%81%8C%E6%AD%BB%E3%81%AC%E5%95%8F%E9%A1%8C/</link>
      <pubDate>Wed, 10 Apr 2019 16:27:25 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/04/10/d%E8%A8%80%E8%AA%9E-shared-library-down-cast%E3%81%A7%E5%9E%8B%E6%83%85%E5%A0%B1%E3%81%8C%E6%AD%BB%E3%81%AC%E5%95%8F%E9%A1%8C/</guid>
      <description>最近気づいた現象。(バグ？)
あるインターフェースIがあって、これを実装したクラスCがShared library 1にある。
これを型Iとして実行ファイル越しにShared library 2に送り、Cにダウンキャストする。
この時、実行ファイル側にCの情報がないとダウンキャストが失敗する。
具体的には以下のような状態。
 type.d
interface I { }  dll1.d
import type; class C : I {} I create() { return new C; } extern(C) string funcName() { return create.mangleof;}  dll2.d
import type; import dll1; void use(I i) { import std.stdio : writeln; writeln(cast(C)i); } extern(C) string funcName() { return use.mangleof;}  main.d
import std.experimental.all; import core.runtime; import core.sys.posix.dlfcn : dlsym, dlerror; import type; void main() { execute([&amp;quot;dmd&amp;quot;, &amp;quot;dll1.</description>
    </item>
    
  </channel>
</rss>