<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Language Server on そばやのブログ</title>
    <link>https://sobaya007.github.io/tags/language-server/</link>
    <description>Recent content in Language Server on そばやのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 30 Jul 2019 10:16:11 +0900</lastBuildDate>
    
	<atom:link href="https://sobaya007.github.io/tags/language-server/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>VimでD言語</title>
      <link>https://sobaya007.github.io/2019/07/30/vim%E3%81%A7d%E8%A8%80%E8%AA%9E/</link>
      <pubDate>Tue, 30 Jul 2019 10:16:11 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/07/30/vim%E3%81%A7d%E8%A8%80%E8%AA%9E/</guid>
      <description>多分D言語erさんの多くはVSCodeで開発してるんじゃないかと思うんですが、私は敬虔なvim教徒なのでnvimで日夜D言語を書いております。 しかしながらD言語+vimの環境構築の例がなかなかヒットしないのでメモ書き程度に残しておきます。
使うもの autozimu/LanguageClient-neovim 言わずと知れたLSPのプラグインです。coc.nvimも使ってみたのですが、なぜか補間がうまくいかなかったため断念しました。
dls D言語のLanguage Serverです。割と活発に活動していていいかんじ。
dlsのインストール 敬虔なD言語erなら当然DUBはインストールされていますよね？それさえあれば
&amp;gt; dub fetch dls &amp;gt; dub run dls:bootstrap  で終わりです。
設定 私はdeinを使っているので、plugins.tomlに以下のような記述をしています。
[[plugins]] repo = &#39;autozimu/LanguageClient-neovim&#39; rev = &#39;next&#39; build = &#39;bash install.sh&#39; hook_add = &#39;&#39;&#39; let g:LanguageClient_serverCommands = { ... \ &#39;d&#39;: [&#39;~/.dub/packages/.bin/dls-latest/dls&#39;], ... \ } let g:LanguageClient_rootMarkers = { ... \ &#39;d&#39;: [&#39;dub.json&#39;, &#39;dub.sdl&#39;], ... \ } nnoremap &amp;lt;F5&amp;gt; :call LanguageClient_contextMenu()&amp;lt;CR&amp;gt; nnoremap &amp;lt;silent&amp;gt; K :call LanguageClient#textDocument_hover()&amp;lt;CR&amp;gt; nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-]&amp;gt; :call LanguageClient#textDocument_definition()&amp;lt;CR&amp;gt; nnoremap &amp;lt;silent&amp;gt; &amp;lt;F2&amp;gt; :call LanguageClient#textDocument_rename()&amp;lt;CR&amp;gt; set hidden &amp;quot;ないと失敗する操作が存在する(Renameとか)  こんなんで大体動きます。 ショートカット系はお好みで。</description>
    </item>
    
    <item>
      <title>DLSを直した話</title>
      <link>https://sobaya007.github.io/2019/05/09/dls%E3%82%92%E7%9B%B4%E3%81%97%E3%81%9F%E8%A9%B1/</link>
      <pubDate>Thu, 09 May 2019 12:03:42 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/05/09/dls%E3%82%92%E7%9B%B4%E3%81%97%E3%81%9F%E8%A9%B1/</guid>
      <description>動機 私はD言語を書くときNeovimを使っています。
プラグインとして以前まではdutylを使っていたのですが、昨今Language Server/なるものが流行りだしており、vim-lsp+dlsを使うようになりました。
しかしいざ使ってみるといくつかの機能がうまく動いていないように思われます。
READMEによると、DLSのサポートしている機能は
 コード補間 シンボルの定義へジャンプ 参照を検索 シンボルの名前変更 エラーチェック フォーマット シンボルの列挙 シンボルのハイライト ホバー時のドキュメント表示  となっています。
しかしvim-lspで例えば:LspDocumentFormatと打ってもDocument formatting not supported for dと言われてしまいます。
多分バグだと思ったので直してみようと思いました。
原因 LSP(Language Server Protocol)において、Language Serverの起動時にinitializeという命令が飛びます。
この命令のDLS側のハンドリングに問題(?)があったためうまく動いていないようでした。
Micrsoft公式のドキュメントによると、initialize時clientが送るデータの中にはcapabilitiesなるものが含まれており、server側が返す値にも同様にcapabilitiesなるものがあるようです。
ドキュメント内では、clientから送るものはThe capabilities provided by the client (editor or tool)であり、serverから返すものはThe capabilities the language server providesらしいです。
これを見る限り、clientの送るcapabilitiesは「以下のような機能を提供して欲しい」という意味であり、server側からのcapabilitiesは「要求された機能のうち、実際に提供できる機能は以下のものである」という意味であると考えられます。
しかしながらvim-lspではinitialize時にcapabilitiesをほとんど送っていません。
これでは先程の解釈によると「何の機能も要求していない」ということになります。したがって、DLSは当然何も返しません。
その結果vim-lsp側からは「DLSは何の機能も持たない」と解釈されてしまいます。これがnot supportedの原因でした。
この状況を素直に捉えれば、「仕様に則ったrequestを送っていないvim-lsp側に問題がある」となるのでしょうが、試してみたところなぜか他の言語のLanguage Serverは普通に動いてしまっています。 おかしいと思い各種Language Serverのコードを見に行きました。すると&amp;hellip;
 javascript-typescript-langserverより引用
const result: InitializeResult = { capabilities: { // Tell the client that the server works in FULL text document sync mode textDocumentSync: TextDocumentSyncKind.</description>
    </item>
    
  </channel>
</rss>