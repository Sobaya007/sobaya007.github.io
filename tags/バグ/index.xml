<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>バグ on そばやのブログ</title>
    <link>https://sobaya007.github.io/tags/%E3%83%90%E3%82%B0/</link>
    <description>Recent content in バグ on そばやのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 06 Jan 2020 15:11:03 +0900</lastBuildDate>
    
	<atom:link href="https://sobaya007.github.io/tags/%E3%83%90%E3%82%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>D言語で白い三角形を出してみた話</title>
      <link>https://sobaya007.github.io/2020/01/06/d%E8%A8%80%E8%AA%9E%E3%81%A7%E7%99%BD%E3%81%84%E4%B8%89%E8%A7%92%E5%BD%A2%E3%82%92%E5%87%BA%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F%E8%A9%B1/</link>
      <pubDate>Mon, 06 Jan 2020 15:11:03 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2020/01/06/d%E8%A8%80%E8%AA%9E%E3%81%A7%E7%99%BD%E3%81%84%E4%B8%89%E8%A7%92%E5%BD%A2%E3%82%92%E5%87%BA%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F%E8%A9%B1/</guid>
      <description>D言語でShaderを書いてみた 何言ってんだこいつってかんじですが、呼んで字のごとくです。
本当は成果も中途半端で出し渋るレベルの状態なんですが、真面目にやっていくと流石に心が折れそうだったのでここらへんで報告記事を出して一区切りつけようかと思った次第です。
kwsk つまり何をしたかということなんですが、こういうわけです
 D言語でShaderっぽいコードを書く LDC(D言語のLLVMバックエンドコンパイラ)でLLVM-IRに変換 自作のトランスパイラを噛ませてLLVM-IRをSPIR-V(Vulkanとか用の中間言語)に変換  これでD言語で書いたコードがShaderとしてVulkan上で実行できるようになります。 実際にやってみた結果がこちらです。 コードはこちら。
やっと出ました！！！#産地直送 pic.twitter.com/ALZ17AAC1h
&amp;mdash; そばや (@sobaya007) December 31, 2019 
私の顔のほうが目立ちますが、見てほしいのは白い三角形のほうです。こいつのフラグメントシェーダはこんなかんじになっています。
import shader.builtin; import shader.attribute; import spirv.spv; import ldc.attributes; extern(C): @output { vec4 color; } @entryPoint(ExecutionModel.Fragment) @execMode(ExecutionMode.OriginUpperLeft) void fragMain() { color = vec4([1.0, 1.0, 1.0, 1.0]); }  確かにいいかんじにD言語で書けています。
様々なサブ情報はUDAでゴリっています。 あと2020年1月6日現在、LDCでは変数に属性を仕込めないので、それ用の変更を施したLDCをビルドして使っています。
まとめ とまぁこんなかんじの年末年始でした。
こいつに関してはちょっと先行きが不安すぎるのでいい経験だったと思って手を引こうと思っています。暇な方いたらぜひ続きをどうぞ。 今年もどこへ向かうかはわからないけれど、少なくとも立ち止まらないようにはしていきたいですね。
ということで、端的に内容が知りたい方はここまでで大丈夫です。 以下は見なくていいです。
TL;DR 今回やったことの肝はLLVM-IRからSPIR-Vへの変換のところですね。
実はLLVM-IRとSPIR-Vは結構instructionの単位とかが似通っており、パッと見変換は容易に見えます(少なくとも始める前の私にはそう見えました)し、実際LLVM-IRとSPIR-Vの相互変換ライブラリは存在します。
かの悪名高きDComputeもOpenCLバックエンドモードのときは実はこいつを使っています。
ではなぜ既に存在するソレを使わなかったのか。 それはなんと&amp;hellip;
既存のライブラリではVulkan用のSPIR-Vは吐けないのです！！！ ぬぁぬぁぬぁぬぁんだっとぅぇぇええええええええええ??!!?!?!?!?
そう、これが長年抱えていた悩みだったのです。
この旨はちゃんと当局も把握しており、過去のレポジトリではVulkan、サポートせぇへんのか？というIssueが立っていたほどです。</description>
    </item>
    
    <item>
      <title>Win32 &#43; D言語 &#43; DLLで謎のクラッシュ</title>
      <link>https://sobaya007.github.io/2019/12/23/win32-d%E8%A8%80%E8%AA%9E-dll%E3%81%A7%E8%AC%8E%E3%81%AE%E3%82%AF%E3%83%A9%E3%83%83%E3%82%B7%E3%83%A5/</link>
      <pubDate>Mon, 23 Dec 2019 01:09:56 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/12/23/win32-d%E8%A8%80%E8%AA%9E-dll%E3%81%A7%E8%AC%8E%E3%81%AE%E3%82%AF%E3%83%A9%E3%83%83%E3%82%B7%E3%83%A5/</guid>
      <description>もはやこれはバグなのかすら私にはわからない&amp;hellip;
※追記: 全然違うコード張ってました。 ※追追記: 直りしました。
環境  Windows10 64bit DMD v2.089.1-dirty  バグったコード 実際にバグが起きたのは以下のコード。 ざっくり説明すると、
 2つの関数をexportするDのコードを作る コンパイルしてDLLにし、読み込む 1つの関数は普通に実行できるが、もう1つは実行できない いかがでしたか？  enum dllSource = q{ import core.sys.windows.windows; import core.sys.windows.dll; import core.stdc.stdio; import std; __gshared HINSTANCE g_hInst; export extern(C) void dllprint() { printf(&amp;quot;hello dll world\n&amp;quot;); } export extern(C) Variant getThree() { int i = 3; return Variant(i); } extern (Windows) BOOL DllMain(HINSTANCE hInstance, ULONG ulReason, LPVOID pvReserved) { switch (ulReason) { case DLL_PROCESS_ATTACH: g_hInst = hInstance; dll_process_attach( hInstance, true ); break; case DLL_PROCESS_DETACH: dll_process_detach( hInstance, true ); break; case DLL_THREAD_ATTACH: dll_thread_attach( true, true ); break; case DLL_THREAD_DETACH: dll_thread_detach( true, true ); break; default: } return true; } }; import std; import std.</description>
    </item>
    
    <item>
      <title>LDCのバグみつけた - その2 -</title>
      <link>https://sobaya007.github.io/2019/12/05/ldc%E3%81%AE%E3%83%90%E3%82%B0%E3%81%BF%E3%81%A4%E3%81%91%E3%81%9F-%E3%81%9D%E3%81%AE2/</link>
      <pubDate>Thu, 05 Dec 2019 13:38:33 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/12/05/ldc%E3%81%AE%E3%83%90%E3%82%B0%E3%81%BF%E3%81%A4%E3%81%91%E3%81%9F-%E3%81%9D%E3%81%AE2/</guid>
      <description>またみつけてしまった。。。 今度のやつはまた微妙で、私が自分でビルドしたLDCでのみ起きた現象なので、私が悪い可能性も多分にあります。
作業環境  OS: Arch Linux LLVM: 9.0.0 LDC: v1.19.0-beta2(hash = ad80f004aeede0b1582bf9831133c000fecfef07)  起こったこと まず自前でLDCをビルドします。
&amp;gt; git clone --recursive git@github.com:ldc-developers/ldc.git &amp;gt; git checkout v1.19.0-beta2 &amp;gt; git submodule update --recursive &amp;gt; mkdir build &amp;gt; cd build &amp;gt; cmake .. -G Ninja &amp;gt; ninja &amp;gt; sudo ninja install  できあがったLDCはこんなかんじ。
&amp;gt; ldc2 --version LDC - the LLVM D compiler (1.19.0-beta2): based on DMD v2.089.0 and LLVM 9.0.0 built with LDC - the LLVM D compiler (1.</description>
    </item>
    
    <item>
      <title>LDCのバグみつけた</title>
      <link>https://sobaya007.github.io/2019/12/01/ldc%E3%81%AE%E3%83%90%E3%82%B0%E3%81%BF%E3%81%A4%E3%81%91%E3%81%9F/</link>
      <pubDate>Sun, 01 Dec 2019 23:10:16 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/12/01/ldc%E3%81%AE%E3%83%90%E3%82%B0%E3%81%BF%E3%81%A4%E3%81%91%E3%81%9F/</guid>
      <description>久しぶりにバグ見つけました。
端的に言うと、Linux上かつLDCを使って以下に示すような構成のアプリケーションをビルドしようとすると失敗するというものです。
中身 ちょっと複雑です。 こちらに出来上がったものを置いておいたので、よければどうぞ。
まず2つパッケージを用意します。
├── app │ ├── dub.sdl │ └── source │ └── app.d └── lib ├── dub.sdl └── source ├── foo │ └── main.d └── tmp.d  ここではappとlibとしました。 ソースファイルは全部で3つです。
app/source/app.d
import std : writeln; void main() {}  lib/source/foo/main.d
import std.file; void main() {}  lib/source/tmp.d
import std.conv; enum E { M } string func(E e) { return e.to!string; }  dub.sdlの中身はシンプルで、単純にappがlibに依存しているだけです。
いろいろ試したのですが、これが結構最小に近いです。
起きること これでappパッケージをLinux上で実行しようとすると、</description>
    </item>
    
    <item>
      <title>D言語のしょうもないバグをまたみつけた</title>
      <link>https://sobaya007.github.io/2019/06/09/d%E8%A8%80%E8%AA%9E%E3%81%AE%E3%81%97%E3%82%87%E3%81%86%E3%82%82%E3%81%AA%E3%81%84%E3%83%90%E3%82%B0%E3%82%92%E3%81%BE%E3%81%9F%E3%81%BF%E3%81%A4%E3%81%91%E3%81%9F/</link>
      <pubDate>Sun, 09 Jun 2019 20:07:51 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/06/09/d%E8%A8%80%E8%AA%9E%E3%81%AE%E3%81%97%E3%82%87%E3%81%86%E3%82%82%E3%81%AA%E3%81%84%E3%83%90%E3%82%B0%E3%82%92%E3%81%BE%E3%81%9F%E3%81%BF%E3%81%A4%E3%81%91%E3%81%9F/</guid>
      <description>いつもの 今回見つけたバグコードはこちらになります
class A {} void main() { auto f = (A a) =&amp;gt; 1; // this is acceptable auto g = (A) =&amp;gt; 1; // this is not acceptable }  上のラムダ式はただしく型推論されますが、下のラムダ式(引数に名前を与えない)では型がvoidになってしまいます。
仕様かはわかりませんが、習慣に則ってここに報告しておきます。</description>
    </item>
    
    <item>
      <title>D言語で継承&#43;配列のバグがずっと残ってる件について</title>
      <link>https://sobaya007.github.io/2019/04/19/d%E8%A8%80%E8%AA%9E%E3%81%A7%E7%B6%99%E6%89%BF-%E9%85%8D%E5%88%97%E3%81%AE%E3%83%90%E3%82%B0%E3%81%8C%E3%81%9A%E3%81%A3%E3%81%A8%E6%AE%8B%E3%81%A3%E3%81%A6%E3%82%8B%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Fri, 19 Apr 2019 22:38:06 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/04/19/d%E8%A8%80%E8%AA%9E%E3%81%A7%E7%B6%99%E6%89%BF-%E9%85%8D%E5%88%97%E3%81%AE%E3%83%90%E3%82%B0%E3%81%8C%E3%81%9A%E3%81%A3%E3%81%A8%E6%AE%8B%E3%81%A3%E3%81%A6%E3%82%8B%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>またバグの話ですね。 このバグは結構前に発見していて、issueも投げた&amp;hellip;気がするんですが、一向に直りませんね。かなり頻繁に出くわすんですが、他の環境だと違うのでしょうか？
今回のバグはこんなかんじで発生します。
 interface I { int x(); } class C : I { int x() { return 10; } } void main(){ I[] iList; C[] cList = [new C]; iList ~= cList; import std.stdio : writeln; writeln(iList[0].x); //私の環境では6と出た。 }   つまり、
 あるインターフェースIとそれを継承したクラスCがある。 I[]に対して、C[]を結合する(CでなくC[]!)。 I[]から取り出したI越しに仮想関数を呼ぶと、だいたい壊れている(変な値を返したり、SEGVしたりする)。  というもの。 いかがでしたか？ よくわかりませんが、バグっていることがわかりました！ 最後まで見ていただきありがとうございます。</description>
    </item>
    
    <item>
      <title>DMD2.085.0で謎のエラーが出てビルドできなくなる件について</title>
      <link>https://sobaya007.github.io/2019/04/11/dmd2.085.0%E3%81%A7%E8%AC%8E%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E5%87%BA%E3%81%A6%E3%83%93%E3%83%AB%E3%83%89%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%8F%E3%81%AA%E3%82%8B%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Thu, 11 Apr 2019 20:59:06 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/04/11/dmd2.085.0%E3%81%A7%E8%AC%8E%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E5%87%BA%E3%81%A6%E3%83%93%E3%83%AB%E3%83%89%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%8F%E3%81%AA%E3%82%8B%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>実は前から気づいていたが、dmd2.085.0でとあるプロジェクトをビルドしようとしたところtym = x27とかいう謎のエラーを吐いてビルドできなくなってしまった。 ggってみても関連するものが見当たらない。 ブチキレたので調査をしてみた。
とりあえず現状報告。
OSはArch Linux。 dmdが2.085.0になったとき、エラーが起きた箇所の周辺コードを表示してくれるとかいう神機能を今更実装してくれたので試してみようと思い、使ってみたら上記の事態が発生。その時いろいろいじってはみたけどわからず。pacmanでバージョンを上げようとしても上がらなかったので「パッケージ管理者がバグに気づいて止めてるのかな？」と思いとりあえず放置。 ところが本日pacman -Syuしたところ、dmd2.0850が(バグったまま)入ってきやがった。おい。
ということで見つけた最小コードがこちら↓
 app.d
struct A { float e; } struct B { this(A[1]) {} }   これをdubのプロジェクトの中でビルドしようとすると、少なくとも私の環境では落ちます。ぜひお試しあれ。
ちなみにAのメンバーが浮動小数型だとバグりますが、整数型だと通ります。 また、Bのコンストラクタ引数の配列数を2以上にすると通ります。 意味がわからん&amp;hellip;
追記 2019/5/25
この記事についてツイートをしたところ https://t.co/5HGn31UQcD これでなおるかもしれません、といっても最速で2.085.2リリースになってしまいますが。
&amp;mdash; 私にICEが舞い降りた！ (@shitsyndrome) April 16, 2019  とのお知らせが。
実際にdmd2.086.0で動かしてみると、無事動きました！ありがとうございます！！
BugzillaとかでIssue立てるのは私なんかにはハードルがめちゃめちゃ高いのでTwitterで反応してこうして直してくださると本当にありがたいですね。</description>
    </item>
    
    <item>
      <title>D言語&#43;Shared Library&#43;Down castで型情報が死ぬ問題</title>
      <link>https://sobaya007.github.io/2019/04/10/d%E8%A8%80%E8%AA%9E-shared-library-down-cast%E3%81%A7%E5%9E%8B%E6%83%85%E5%A0%B1%E3%81%8C%E6%AD%BB%E3%81%AC%E5%95%8F%E9%A1%8C/</link>
      <pubDate>Wed, 10 Apr 2019 16:27:25 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/04/10/d%E8%A8%80%E8%AA%9E-shared-library-down-cast%E3%81%A7%E5%9E%8B%E6%83%85%E5%A0%B1%E3%81%8C%E6%AD%BB%E3%81%AC%E5%95%8F%E9%A1%8C/</guid>
      <description>最近気づいた現象。(バグ？)
あるインターフェースIがあって、これを実装したクラスCがShared library 1にある。
これを型Iとして実行ファイル越しにShared library 2に送り、Cにダウンキャストする。
この時、実行ファイル側にCの情報がないとダウンキャストが失敗する。
具体的には以下のような状態。
 type.d
interface I { }  dll1.d
import type; class C : I {} I create() { return new C; } extern(C) string funcName() { return create.mangleof;}  dll2.d
import type; import dll1; void use(I i) { import std.stdio : writeln; writeln(cast(C)i); } extern(C) string funcName() { return use.mangleof;}  main.d
import std.experimental.all; import core.runtime; import core.sys.posix.dlfcn : dlsym, dlerror; import type; void main() { execute([&amp;quot;dmd&amp;quot;, &amp;quot;dll1.</description>
    </item>
    
  </channel>
</rss>