<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>D言語 on そばやのブログ</title>
    <link>https://sobaya007.github.io/tags/d%E8%A8%80%E8%AA%9E/</link>
    <description>Recent content in D言語 on そばやのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 05 Dec 2019 13:38:33 +0900</lastBuildDate>
    
	<atom:link href="https://sobaya007.github.io/tags/d%E8%A8%80%E8%AA%9E/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LDCのバグみつけた - その2 -</title>
      <link>https://sobaya007.github.io/2019/12/05/ldc%E3%81%AE%E3%83%90%E3%82%B0%E3%81%BF%E3%81%A4%E3%81%91%E3%81%9F-%E3%81%9D%E3%81%AE2/</link>
      <pubDate>Thu, 05 Dec 2019 13:38:33 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/12/05/ldc%E3%81%AE%E3%83%90%E3%82%B0%E3%81%BF%E3%81%A4%E3%81%91%E3%81%9F-%E3%81%9D%E3%81%AE2/</guid>
      <description>またみつけてしまった。。。 今度のやつはまた微妙で、私が自分でビルドしたLDCでのみ起きた現象なので、私が悪い可能性も多分にあります。
作業環境  OS: Arch Linux LLVM: 9.0.0 LDC: v1.19.0-beta2(hash = ad80f004aeede0b1582bf9831133c000fecfef07)  起こったこと まず自前でLDCをビルドします。
&amp;gt; git clone --recursive git@github.com:ldc-developers/ldc.git &amp;gt; git checkout v1.19.0-beta2 &amp;gt; git submodule update --recursive &amp;gt; mkdir build &amp;gt; cd build &amp;gt; cmake .. -G Ninja &amp;gt; ninja &amp;gt; sudo ninja install  できあがったLDCはこんなかんじ。
&amp;gt; ldc2 --version LDC - the LLVM D compiler (1.19.0-beta2): based on DMD v2.089.0 and LLVM 9.0.0 built with LDC - the LLVM D compiler (1.</description>
    </item>
    
    <item>
      <title>LDCのバグみつけた</title>
      <link>https://sobaya007.github.io/2019/12/01/ldc%E3%81%AE%E3%83%90%E3%82%B0%E3%81%BF%E3%81%A4%E3%81%91%E3%81%9F/</link>
      <pubDate>Sun, 01 Dec 2019 23:10:16 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/12/01/ldc%E3%81%AE%E3%83%90%E3%82%B0%E3%81%BF%E3%81%A4%E3%81%91%E3%81%9F/</guid>
      <description>久しぶりにバグ見つけました。
端的に言うと、Linux上かつLDCを使って以下に示すような構成のアプリケーションをビルドしようとすると失敗するというものです。
中身 ちょっと複雑です。 こちらに出来上がったものを置いておいたので、よければどうぞ。
まず2つパッケージを用意します。
├── app │ ├── dub.sdl │ └── source │ └── app.d └── lib ├── dub.sdl └── source ├── foo │ └── main.d └── tmp.d  ここではappとlibとしました。 ソースファイルは全部で3つです。
app/source/app.d
import std : writeln; void main() {}  lib/source/foo/main.d
import std.file; void main() {}  lib/source/tmp.d
import std.conv; enum E { M } string func(E e) { return e.to!string; }  dub.sdlの中身はシンプルで、単純にappがlibに依存しているだけです。
いろいろ試したのですが、これが結構最小に近いです。
起きること これでappパッケージをLinux上で実行しようとすると、</description>
    </item>
    
    <item>
      <title>VimでD言語</title>
      <link>https://sobaya007.github.io/2019/07/30/vim%E3%81%A7d%E8%A8%80%E8%AA%9E/</link>
      <pubDate>Tue, 30 Jul 2019 10:16:11 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/07/30/vim%E3%81%A7d%E8%A8%80%E8%AA%9E/</guid>
      <description>多分D言語erさんの多くはVSCodeで開発してるんじゃないかと思うんですが、私は敬虔なvim教徒なのでnvimで日夜D言語を書いております。 しかしながらD言語+vimの環境構築の例がなかなかヒットしないのでメモ書き程度に残しておきます。
使うもの autozimu/LanguageClient-neovim 言わずと知れたLSPのプラグインです。coc.nvimも使ってみたのですが、なぜか補間がうまくいかなかったため断念しました。
dls D言語のLanguage Serverです。割と活発に活動していていいかんじ。
dlsのインストール 敬虔なD言語erなら当然DUBはインストールされていますよね？それさえあれば
&amp;gt; dub fetch dls &amp;gt; dub run dls:bootstrap  で終わりです。
設定 私はdeinを使っているので、plugins.tomlに以下のような記述をしています。
[[plugins]] repo = &#39;autozimu/LanguageClient-neovim&#39; rev = &#39;next&#39; build = &#39;bash install.sh&#39; hook_add = &#39;&#39;&#39; let g:LanguageClient_serverCommands = { ... \ &#39;d&#39;: [&#39;~/.dub/packages/.bin/dls-latest/dls&#39;], ... \ } let g:LanguageClient_rootMarkers = { ... \ &#39;d&#39;: [&#39;dub.json&#39;, &#39;dub.sdl&#39;], ... \ } nnoremap &amp;lt;F5&amp;gt; :call LanguageClient_contextMenu()&amp;lt;CR&amp;gt; nnoremap &amp;lt;silent&amp;gt; K :call LanguageClient#textDocument_hover()&amp;lt;CR&amp;gt; nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-]&amp;gt; :call LanguageClient#textDocument_definition()&amp;lt;CR&amp;gt; nnoremap &amp;lt;silent&amp;gt; &amp;lt;F2&amp;gt; :call LanguageClient#textDocument_rename()&amp;lt;CR&amp;gt; set hidden &amp;quot;ないと失敗する操作が存在する(Renameとか)  こんなんで大体動きます。 ショートカット系はお好みで。</description>
    </item>
    
    <item>
      <title>D言語のしょうもないバグをまたみつけた</title>
      <link>https://sobaya007.github.io/2019/06/09/d%E8%A8%80%E8%AA%9E%E3%81%AE%E3%81%97%E3%82%87%E3%81%86%E3%82%82%E3%81%AA%E3%81%84%E3%83%90%E3%82%B0%E3%82%92%E3%81%BE%E3%81%9F%E3%81%BF%E3%81%A4%E3%81%91%E3%81%9F/</link>
      <pubDate>Sun, 09 Jun 2019 20:07:51 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/06/09/d%E8%A8%80%E8%AA%9E%E3%81%AE%E3%81%97%E3%82%87%E3%81%86%E3%82%82%E3%81%AA%E3%81%84%E3%83%90%E3%82%B0%E3%82%92%E3%81%BE%E3%81%9F%E3%81%BF%E3%81%A4%E3%81%91%E3%81%9F/</guid>
      <description>いつもの 今回見つけたバグコードはこちらになります
class A {} void main() { auto f = (A a) =&amp;gt; 1; // this is acceptable auto g = (A) =&amp;gt; 1; // this is not acceptable }  上のラムダ式はただしく型推論されますが、下のラムダ式(引数に名前を与えない)では型がvoidになってしまいます。
仕様かはわかりませんが、習慣に則ってここに報告しておきます。</description>
    </item>
    
    <item>
      <title>D言語でLLDも使ってリンクを高速化してみた</title>
      <link>https://sobaya007.github.io/2019/05/13/d%E8%A8%80%E8%AA%9E%E3%81%A7lld%E3%82%82%E4%BD%BF%E3%81%A3%E3%81%A6%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E9%AB%98%E9%80%9F%E5%8C%96%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Mon, 13 May 2019 11:32:01 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/05/13/d%E8%A8%80%E8%AA%9E%E3%81%A7lld%E3%82%82%E4%BD%BF%E3%81%A3%E3%81%A6%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E9%AB%98%E9%80%9F%E5%8C%96%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>GOLDの続きです。
LLDとはなんぞや LLDとはリンカーの一種で、色々なアーキテクチャに対応している。goldより速いらしい。
多分OS標準のpackage managerで普通にインストールできる。
今回のモチベーション 前回の記事で「LLDが使えない!」という自体に陥り、仕方なくgoldを使う決意を固めていたのですが、諦めきれずにちょくちょく試しておりました。
今回D言語でうまく使う方法を無事発見できたのでメモがてら書いておこうと思いました。
TL;DR LLDはld.lldという名前の実行ファイルになっている。
-fuse-ld=lldとすれば置き換わると書いてあったので、試しに
&amp;gt; dmd test.d -L-fuse-ld=lld  としてみる。確かにコンパイルは通る。
しかし本当にLLDが使われているのかわからない。
LLDの「Using LLD」の項をよく読んでみると、
 LLD leaves its name and version number to a .comment section in an output. If you are in doubt whether you are successfully using LLD or not, run readelf --string-dump .comment &amp;lt;output-file&amp;gt; and examine the output. If the string “Linker: LLD” is included in the output, you are using LLD.</description>
    </item>
    
    <item>
      <title>DLSを直した話</title>
      <link>https://sobaya007.github.io/2019/05/09/dls%E3%82%92%E7%9B%B4%E3%81%97%E3%81%9F%E8%A9%B1/</link>
      <pubDate>Thu, 09 May 2019 12:03:42 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/05/09/dls%E3%82%92%E7%9B%B4%E3%81%97%E3%81%9F%E8%A9%B1/</guid>
      <description>動機 私はD言語を書くときNeovimを使っています。
プラグインとして以前まではdutylを使っていたのですが、昨今Language Server/なるものが流行りだしており、vim-lsp+dlsを使うようになりました。
しかしいざ使ってみるといくつかの機能がうまく動いていないように思われます。
READMEによると、DLSのサポートしている機能は
 コード補間 シンボルの定義へジャンプ 参照を検索 シンボルの名前変更 エラーチェック フォーマット シンボルの列挙 シンボルのハイライト ホバー時のドキュメント表示  となっています。
しかしvim-lspで例えば:LspDocumentFormatと打ってもDocument formatting not supported for dと言われてしまいます。
多分バグだと思ったので直してみようと思いました。
原因 LSP(Language Server Protocol)において、Language Serverの起動時にinitializeという命令が飛びます。
この命令のDLS側のハンドリングに問題(?)があったためうまく動いていないようでした。
Micrsoft公式のドキュメントによると、initialize時clientが送るデータの中にはcapabilitiesなるものが含まれており、server側が返す値にも同様にcapabilitiesなるものがあるようです。
ドキュメント内では、clientから送るものはThe capabilities provided by the client (editor or tool)であり、serverから返すものはThe capabilities the language server providesらしいです。
これを見る限り、clientの送るcapabilitiesは「以下のような機能を提供して欲しい」という意味であり、server側からのcapabilitiesは「要求された機能のうち、実際に提供できる機能は以下のものである」という意味であると考えられます。
しかしながらvim-lspではinitialize時にcapabilitiesをほとんど送っていません。
これでは先程の解釈によると「何の機能も要求していない」ということになります。したがって、DLSは当然何も返しません。
その結果vim-lsp側からは「DLSは何の機能も持たない」と解釈されてしまいます。これがnot supportedの原因でした。
この状況を素直に捉えれば、「仕様に則ったrequestを送っていないvim-lsp側に問題がある」となるのでしょうが、試してみたところなぜか他の言語のLanguage Serverは普通に動いてしまっています。 おかしいと思い各種Language Serverのコードを見に行きました。すると&amp;hellip;
 javascript-typescript-langserverより引用
const result: InitializeResult = { capabilities: { // Tell the client that the server works in FULL text document sync mode textDocumentSync: TextDocumentSyncKind.</description>
    </item>
    
    <item>
      <title>D言語でgoldを使ってリンクを高速化してみた</title>
      <link>https://sobaya007.github.io/2019/04/27/d%E8%A8%80%E8%AA%9E%E3%81%A7gold%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E9%AB%98%E9%80%9F%E5%8C%96%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Sat, 27 Apr 2019 23:33:31 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/04/27/d%E8%A8%80%E8%AA%9E%E3%81%A7gold%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E9%AB%98%E9%80%9F%E5%8C%96%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>goldとはなんぞや goldとはELFバイナリ用のリンカーで、ldより高速なやつである。binutilsに入っているので、多分インストールしなくてもほぼ勝手に入っている。
今回のモチベーション 今回はあんまりD言語は関係ないのですが、D言語でのビルドステップを高速にしたい場面に直面したので「ビルドが遅い→どうせリンクが遅いんじゃね？」という適当な推論によりリンクを速くする術を捜しておりました。
先日とある密会に参加したところ教えていただいたのでブログに書いておこうとなりました。
ちなみにLLVMと何やら関連の深そうなLLDというのもあり、こちらはgoldの2倍速いらしい。リンカ界も日進月歩なんだなぁ。 LLDはなぜかDMDごしに呼び出すのはできなかったのでできたらまた記事書きます。
使い方 goldはld.goldという名前の実行ファイルになっている。 gccでもdmdでも、リンカオプションに-fuse-ld=goldとすると置き換わる。
&amp;gt; dmd main.o sub.o -L=-fuse-ld=gold  速度の比較 いったい何回やられたんだよってかんじですが、一応自分でも比較してみました。 適当に10000個関数をsub.dに作ってmain.dからそれらを呼び出す、というプログラムのリンク時間を測定しました。
ld : 4 secs, 986 ms, 351 μs, and 6 hnsecs gold : 1 sec, 699 ms, 670 μs, and 7 hnsecs  だいたい4倍くらい速くなっている。すごい。
比較用のコードはこちらにあります。 LLDはもっと速いらしいのでやってみたいなぁ。
追記 LDCコンパイラとかLLDリンカでもやってみたがLLDあまり速くなかった？LDCだとgoldと他が逆転？ https://t.co/BuiLfhNxYl pic.twitter.com/pijbhHVwHE
&amp;mdash; Shigeki Karita (@kari_tech) April 28, 2019  こんな情報を出していただきまして、もう少し調査してみました。 私の手元でも同様に実行してみたところ、確かにほぼ同じ結果に。そもそも各リンカーは本当に動いているのでしょうか？
実証 バイナリ周りは詳しくないのですが、どうもgoldを使うと実行ファイルのnote sectionにそれらしき情報が乗るらしい。
&amp;gt; dmd main.o sub.o -L-fuse-ld=gold &amp;gt; readelf -n main Displaying notes found in: .</description>
    </item>
    
    <item>
      <title>LDCビルド方法</title>
      <link>https://sobaya007.github.io/2019/04/27/ldc%E3%83%93%E3%83%AB%E3%83%89%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 27 Apr 2019 23:33:31 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/04/27/ldc%E3%83%93%E3%83%AB%E3%83%89%E6%96%B9%E6%B3%95/</guid>
      <description>結構難航しているのでまとめ。 一応Wikiは存在しているので困ったら参考までに。
結論 git clone https://github.com/ldc-developers/ldc --recursive cd ldc mkdir build cd build cmake .. -DLDC_WITH_LLD=OFF make  詰まったところ CMakeが「Some (but not all) targets in this export set were already defined」みたいなエラーを出す  issue PR 2019年10月31日現在、masterではこのバグは解決済み。 リリースでいうとv1.18.0時点では直っていない。 一部のLLVMコンフィグだとうまくいかないときがあるらしく、それがこれ。  ビルド(makeとかninjaとか)の途中で「CommandLine Error: Option &amp;lsquo;mc-relax-all&amp;rsquo; registered more than once!」と言われる cmakeするときにちゃんと-DLDC_WITH_LLD=OFFをつけるといけるらしい。謎。</description>
    </item>
    
    <item>
      <title>D言語で継承&#43;配列のバグがずっと残ってる件について</title>
      <link>https://sobaya007.github.io/2019/04/19/d%E8%A8%80%E8%AA%9E%E3%81%A7%E7%B6%99%E6%89%BF-%E9%85%8D%E5%88%97%E3%81%AE%E3%83%90%E3%82%B0%E3%81%8C%E3%81%9A%E3%81%A3%E3%81%A8%E6%AE%8B%E3%81%A3%E3%81%A6%E3%82%8B%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Fri, 19 Apr 2019 22:38:06 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/04/19/d%E8%A8%80%E8%AA%9E%E3%81%A7%E7%B6%99%E6%89%BF-%E9%85%8D%E5%88%97%E3%81%AE%E3%83%90%E3%82%B0%E3%81%8C%E3%81%9A%E3%81%A3%E3%81%A8%E6%AE%8B%E3%81%A3%E3%81%A6%E3%82%8B%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>またバグの話ですね。 このバグは結構前に発見していて、issueも投げた&amp;hellip;気がするんですが、一向に直りませんね。かなり頻繁に出くわすんですが、他の環境だと違うのでしょうか？
今回のバグはこんなかんじで発生します。
 interface I { int x(); } class C : I { int x() { return 10; } } void main(){ I[] iList; C[] cList = [new C]; iList ~= cList; import std.stdio : writeln; writeln(iList[0].x); //私の環境では6と出た。 }   つまり、
 あるインターフェースIとそれを継承したクラスCがある。 I[]に対して、C[]を結合する(CでなくC[]!)。 I[]から取り出したI越しに仮想関数を呼ぶと、だいたい壊れている(変な値を返したり、SEGVしたりする)。  というもの。 いかがでしたか？ よくわかりませんが、バグっていることがわかりました！ 最後まで見ていただきありがとうございます。</description>
    </item>
    
    <item>
      <title>DMD2.085.0で謎のエラーが出てビルドできなくなる件について</title>
      <link>https://sobaya007.github.io/2019/04/11/dmd2.085.0%E3%81%A7%E8%AC%8E%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E5%87%BA%E3%81%A6%E3%83%93%E3%83%AB%E3%83%89%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%8F%E3%81%AA%E3%82%8B%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Thu, 11 Apr 2019 20:59:06 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/04/11/dmd2.085.0%E3%81%A7%E8%AC%8E%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E5%87%BA%E3%81%A6%E3%83%93%E3%83%AB%E3%83%89%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%8F%E3%81%AA%E3%82%8B%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>実は前から気づいていたが、dmd2.085.0でとあるプロジェクトをビルドしようとしたところtym = x27とかいう謎のエラーを吐いてビルドできなくなってしまった。 ggってみても関連するものが見当たらない。 ブチキレたので調査をしてみた。
とりあえず現状報告。
OSはArch Linux。 dmdが2.085.0になったとき、エラーが起きた箇所の周辺コードを表示してくれるとかいう神機能を今更実装してくれたので試してみようと思い、使ってみたら上記の事態が発生。その時いろいろいじってはみたけどわからず。pacmanでバージョンを上げようとしても上がらなかったので「パッケージ管理者がバグに気づいて止めてるのかな？」と思いとりあえず放置。 ところが本日pacman -Syuしたところ、dmd2.0850が(バグったまま)入ってきやがった。おい。
ということで見つけた最小コードがこちら↓
 app.d
struct A { float e; } struct B { this(A[1]) {} }   これをdubのプロジェクトの中でビルドしようとすると、少なくとも私の環境では落ちます。ぜひお試しあれ。
ちなみにAのメンバーが浮動小数型だとバグりますが、整数型だと通ります。 また、Bのコンストラクタ引数の配列数を2以上にすると通ります。 意味がわからん&amp;hellip;
追記 2019/5/25
この記事についてツイートをしたところ https://t.co/5HGn31UQcD これでなおるかもしれません、といっても最速で2.085.2リリースになってしまいますが。
&amp;mdash; 私にICEが舞い降りた！ (@shitsyndrome) April 16, 2019  とのお知らせが。
実際にdmd2.086.0で動かしてみると、無事動きました！ありがとうございます！！
BugzillaとかでIssue立てるのは私なんかにはハードルがめちゃめちゃ高いのでTwitterで反応してこうして直してくださると本当にありがたいですね。</description>
    </item>
    
    <item>
      <title>D言語&#43;Shared Library&#43;Down castで型情報が死ぬ問題</title>
      <link>https://sobaya007.github.io/2019/04/10/d%E8%A8%80%E8%AA%9E-shared-library-down-cast%E3%81%A7%E5%9E%8B%E6%83%85%E5%A0%B1%E3%81%8C%E6%AD%BB%E3%81%AC%E5%95%8F%E9%A1%8C/</link>
      <pubDate>Wed, 10 Apr 2019 16:27:25 +0900</pubDate>
      
      <guid>https://sobaya007.github.io/2019/04/10/d%E8%A8%80%E8%AA%9E-shared-library-down-cast%E3%81%A7%E5%9E%8B%E6%83%85%E5%A0%B1%E3%81%8C%E6%AD%BB%E3%81%AC%E5%95%8F%E9%A1%8C/</guid>
      <description>最近気づいた現象。(バグ？)
あるインターフェースIがあって、これを実装したクラスCがShared library 1にある。
これを型Iとして実行ファイル越しにShared library 2に送り、Cにダウンキャストする。
この時、実行ファイル側にCの情報がないとダウンキャストが失敗する。
具体的には以下のような状態。
 type.d
interface I { }  dll1.d
import type; class C : I {} I create() { return new C; } extern(C) string funcName() { return create.mangleof;}  dll2.d
import type; import dll1; void use(I i) { import std.stdio : writeln; writeln(cast(C)i); } extern(C) string funcName() { return use.mangleof;}  main.d
import std.experimental.all; import core.runtime; import core.sys.posix.dlfcn : dlsym, dlerror; import type; void main() { execute([&amp;quot;dmd&amp;quot;, &amp;quot;dll1.</description>
    </item>
    
  </channel>
</rss>